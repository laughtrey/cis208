     1                                  ;
     2                                  ; file: asm_main.asm
     3                                  
     4                                  %include "asm_io.inc"
     1                              <1> 	extern  read_int, print_int, print_string
     2                              <1> 	extern	read_char, print_char, print_nl
     3                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     4                              <1> 
     5                              <1> %macro 	dump_regs 1
     6                              <1> 	push	  dword %1
     7                              <1> 	call	  sub_dump_regs
     8                              <1> %endmacro
     9                              <1> 
    10                              <1> 
    11                              <1> ;
    12                              <1> ; usage: dump_mem label, start-address, # paragraphs
    13                              <1> %macro  dump_mem 3
    14                              <1> 	push	 dword %1
    15                              <1> 	push	 dword %2
    16                              <1> 	push	 dword %3
    17                              <1> 	call	 sub_dump_mem
    18                              <1> %endmacro
    19                              <1> 
    20                              <1> %macro	dump_math 1
    21                              <1> 	push	 dword %1
    22                              <1> 	call	 sub_dump_math
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> %macro  dump_stack 3
    26                              <1> 	push	 dword %3
    27                              <1>         push     dword %2
    28                              <1> 	push	 dword %1
    29                              <1>         call     sub_dump_stack
    30                              <1> %endmacro
     5                                  ;
     6                                  ; initialized data is put in the .data segment
     7                                  ;
     8                                  section .data
     9 00000000 526179204C61756768-             hello: db 'Ray Laughrey', 10
     9 00000009 7265790A           
    10                                          helloLen: equ $-hello
    11                                          syswrite: equ 4
    12                                          stdout: equ 1
    13                                          exit: equ 1
    14                                          SUCCESS: equ 0
    15                                          kernelcall: equ 80h
    16                                  
    17                                  ; uninitialized data is put in the .bss segment
    18                                  ;
    19                                  
    20                                  segment .bss
    21                                  
    22                                  ;
    23                                  ; code is put in the .text segment
    24                                  ;
    25                                  
    26                                  segment .text
    27                                          global  asm_main
    28                                  
    29                                  asm_main:
    30 00000000 C8000000                        enter   0,0               ; setup routine
    31 00000004 60                              pusha
    32 00000005 B804000000                      mov eax,syswrite        ; 4 is the vector for the syswrite function
    33 0000000A BB01000000                      mov ebx,stdout          ; standard output, 1 is for stdout
    34 0000000F B9[00000000]                    mov ecx,hello           ; the address of the string
    35 00000014 BA0D000000                      mov edx,helloLen        ; size of the string (number of characters)
    36 00000019 CD80                            int kernelcall          ; call the interrupt to execute the syswrite function
    37 0000001B E8(00000000)                    call    print_int
    38                                  
    39                                  ; next print out result message as series of steps
    40                                  
    41 00000020 61                              popa
    42 00000021 B800000000                      mov     eax, SUCCESS    ; return back to C
    43 00000026 C9                              leave
    44 00000027 C3                              ret
